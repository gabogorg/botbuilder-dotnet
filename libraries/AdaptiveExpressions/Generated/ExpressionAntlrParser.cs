//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ExpressionAntlrParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ExpressionAntlrParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING_INTERPOLATION_START=1, PLUS=2, SUBSTRACT=3, NON=4, XOR=5, ASTERISK=6, 
		SLASH=7, PERCENT=8, DOUBLE_EQUAL=9, NOT_EQUAL=10, SINGLE_AND=11, DOUBLE_AND=12, 
		DOUBLE_VERTICAL_CYLINDER=13, LESS_THAN=14, MORE_THAN=15, LESS_OR_EQUAl=16, 
		MORE_OR_EQUAL=17, OPEN_BRACKET=18, CLOSE_BRACKET=19, DOT=20, OPEN_SQUARE_BRACKET=21, 
		CLOSE_SQUARE_BRACKET=22, OPEN_CURLY_BRACKET=23, CLOSE_CURLY_BRACKET=24, 
		COMMA=25, COLON=26, ARROW=27, NULL_COALESCE=28, QUESTION_MARK=29, NUMBER=30, 
		WHITESPACE=31, IDENTIFIER=32, NEWLINE=33, STRING=34, INVALID_TOKEN_DEFAULT_MODE=35, 
		TEMPLATE=36, ESCAPE_CHARACTER=37, TEXT_CONTENT=38;
	public const int
		RULE_file = 0, RULE_expression = 1, RULE_primaryExpression = 2, RULE_stringInterpolation = 3, 
		RULE_textContent = 4, RULE_argsList = 5, RULE_lambda = 6, RULE_keyValuePairList = 7, 
		RULE_keyValuePair = 8, RULE_key = 9;
	public static readonly string[] ruleNames = {
		"file", "expression", "primaryExpression", "stringInterpolation", "textContent", 
		"argsList", "lambda", "keyValuePairList", "keyValuePair", "key"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'+'", "'-'", "'!'", "'^'", "'*'", "'/'", "'%'", "'=='", null, 
		"'&'", "'&&'", "'||'", "'<'", "'>'", "'<='", "'>='", "'('", "')'", "'.'", 
		"'['", "']'", "'{'", "'}'", "','", "':'", "'=>'", "'??'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", "NON", "XOR", 
		"ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND", 
		"DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl", 
		"MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET", 
		"CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", 
		"COLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK", "NUMBER", "WHITESPACE", 
		"IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", "TEMPLATE", 
		"ESCAPE_CHARACTER", "TEXT_CONTENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExpressionAntlrParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionAntlrParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionAntlrParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionAntlrParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ExpressionAntlrParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; expression(0);
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryOpExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NON() { return GetToken(ExpressionAntlrParser.NON, 0); }
		public ITerminalNode SUBSTRACT() { return GetToken(ExpressionAntlrParser.SUBSTRACT, 0); }
		public ITerminalNode PLUS() { return GetToken(ExpressionAntlrParser.PLUS, 0); }
		public UnaryOpExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterUnaryOpExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitUnaryOpExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOpExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(ExpressionAntlrParser.XOR, 0); }
		public ITerminalNode ASTERISK() { return GetToken(ExpressionAntlrParser.ASTERISK, 0); }
		public ITerminalNode SLASH() { return GetToken(ExpressionAntlrParser.SLASH, 0); }
		public ITerminalNode PERCENT() { return GetToken(ExpressionAntlrParser.PERCENT, 0); }
		public ITerminalNode PLUS() { return GetToken(ExpressionAntlrParser.PLUS, 0); }
		public ITerminalNode SUBSTRACT() { return GetToken(ExpressionAntlrParser.SUBSTRACT, 0); }
		public ITerminalNode DOUBLE_EQUAL() { return GetToken(ExpressionAntlrParser.DOUBLE_EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(ExpressionAntlrParser.NOT_EQUAL, 0); }
		public ITerminalNode SINGLE_AND() { return GetToken(ExpressionAntlrParser.SINGLE_AND, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(ExpressionAntlrParser.LESS_THAN, 0); }
		public ITerminalNode LESS_OR_EQUAl() { return GetToken(ExpressionAntlrParser.LESS_OR_EQUAl, 0); }
		public ITerminalNode MORE_THAN() { return GetToken(ExpressionAntlrParser.MORE_THAN, 0); }
		public ITerminalNode MORE_OR_EQUAL() { return GetToken(ExpressionAntlrParser.MORE_OR_EQUAL, 0); }
		public ITerminalNode DOUBLE_AND() { return GetToken(ExpressionAntlrParser.DOUBLE_AND, 0); }
		public ITerminalNode DOUBLE_VERTICAL_CYLINDER() { return GetToken(ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER, 0); }
		public ITerminalNode NULL_COALESCE() { return GetToken(ExpressionAntlrParser.NULL_COALESCE, 0); }
		public BinaryOpExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterBinaryOpExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitBinaryOpExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExpContext : ExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PrimaryExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TripleOpExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode QUESTION_MARK() { return GetToken(ExpressionAntlrParser.QUESTION_MARK, 0); }
		public ITerminalNode COLON() { return GetToken(ExpressionAntlrParser.COLON, 0); }
		public TripleOpExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterTripleOpExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitTripleOpExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTripleOpExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case SUBSTRACT:
			case NON:
				{
				_localctx = new UnaryOpExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 24;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << SUBSTRACT) | (1L << NON))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 25; expression(12);
				}
				break;
			case STRING_INTERPOLATION_START:
			case OPEN_BRACKET:
			case OPEN_SQUARE_BRACKET:
			case OPEN_CURLY_BRACKET:
			case NUMBER:
			case IDENTIFIER:
			case STRING:
				{
				_localctx = new PrimaryExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; primaryExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 62;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 29;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 30; Match(XOR);
						State = 31; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 32;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 33;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASTERISK) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 34; expression(11);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 35;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 36;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==SUBSTRACT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 37; expression(10);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 38;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 39;
						_la = TokenStream.LA(1);
						if ( !(_la==DOUBLE_EQUAL || _la==NOT_EQUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 40; expression(9);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 41;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 42; Match(SINGLE_AND);
						}
						State = 43; expression(8);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 44;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 45;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << MORE_THAN) | (1L << LESS_OR_EQUAl) | (1L << MORE_OR_EQUAL))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 46; expression(7);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 47;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 48; Match(DOUBLE_AND);
						State = 49; expression(6);
						}
						break;
					case 8:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 50;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 51; Match(DOUBLE_VERTICAL_CYLINDER);
						State = 52; expression(5);
						}
						break;
					case 9:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 53;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 54; Match(NULL_COALESCE);
						State = 55; expression(4);
						}
						break;
					case 10:
						{
						_localctx = new TripleOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 56;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 57; Match(QUESTION_MARK);
						State = 58; expression(0);
						State = 59; Match(COLON);
						State = 60; expression(3);
						}
						break;
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	 
		public PrimaryExpressionContext() { }
		public virtual void CopyFrom(PrimaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncInvokeExpContext : PrimaryExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_BRACKET, 0); }
		public ITerminalNode NON() { return GetToken(ExpressionAntlrParser.NON, 0); }
		public ArgsListContext argsList() {
			return GetRuleContext<ArgsListContext>(0);
		}
		public FuncInvokeExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterFuncInvokeExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitFuncInvokeExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInvokeExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomContext : PrimaryExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
		public IdAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterIdAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitIdAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonCreationExpContext : PrimaryExpressionContext {
		public ITerminalNode OPEN_CURLY_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_CURLY_BRACKET, 0); }
		public ITerminalNode CLOSE_CURLY_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_CURLY_BRACKET, 0); }
		public KeyValuePairListContext keyValuePairList() {
			return GetRuleContext<KeyValuePairListContext>(0);
		}
		public JsonCreationExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterJsonCreationExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitJsonCreationExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonCreationExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomContext : PrimaryExpressionContext {
		public ITerminalNode STRING() { return GetToken(ExpressionAntlrParser.STRING, 0); }
		public StringAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterStringAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitStringAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexAccessExpContext : PrimaryExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode OPEN_SQUARE_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_SQUARE_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET, 0); }
		public IndexAccessExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterIndexAccessExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitIndexAccessExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAccessExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringInterpolationAtomContext : PrimaryExpressionContext {
		public StringInterpolationContext stringInterpolation() {
			return GetRuleContext<StringInterpolationContext>(0);
		}
		public StringInterpolationAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterStringInterpolationAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitStringInterpolationAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringInterpolationAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpContext : PrimaryExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(ExpressionAntlrParser.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
		public MemberAccessExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : PrimaryExpressionContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_BRACKET, 0); }
		public ParenthesisExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericAtomContext : PrimaryExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(ExpressionAntlrParser.NUMBER, 0); }
		public NumericAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterNumericAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitNumericAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreationExpContext : PrimaryExpressionContext {
		public ITerminalNode OPEN_SQUARE_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_SQUARE_BRACKET, 0); }
		public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET, 0); }
		public ArgsListContext argsList() {
			return GetRuleContext<ArgsListContext>(0);
		}
		public ArrayCreationExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACKET:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 68; Match(OPEN_BRACKET);
				State = 69; expression(0);
				State = 70; Match(CLOSE_BRACKET);
				}
				break;
			case OPEN_SQUARE_BRACKET:
				{
				_localctx = new ArrayCreationExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72; Match(OPEN_SQUARE_BRACKET);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_INTERPOLATION_START) | (1L << PLUS) | (1L << SUBSTRACT) | (1L << NON) | (1L << OPEN_BRACKET) | (1L << OPEN_SQUARE_BRACKET) | (1L << OPEN_CURLY_BRACKET) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << STRING))) != 0)) {
					{
					State = 73; argsList();
					}
				}

				State = 76; Match(CLOSE_SQUARE_BRACKET);
				}
				break;
			case OPEN_CURLY_BRACKET:
				{
				_localctx = new JsonCreationExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 77; Match(OPEN_CURLY_BRACKET);
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER || _la==STRING) {
					{
					State = 78; keyValuePairList();
					}
				}

				State = 81; Match(CLOSE_CURLY_BRACKET);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumericAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 82; Match(NUMBER);
				}
				break;
			case STRING:
				{
				_localctx = new StringAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 83; Match(STRING);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84; Match(IDENTIFIER);
				}
				break;
			case STRING_INTERPOLATION_START:
				{
				_localctx = new StringInterpolationAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85; stringInterpolation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 107;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 105;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new MemberAccessExpContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 88;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 89; Match(DOT);
						State = 90; Match(IDENTIFIER);
						}
						break;
					case 2:
						{
						_localctx = new FuncInvokeExpContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 91;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 93;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NON) {
							{
							State = 92; Match(NON);
							}
						}

						State = 95; Match(OPEN_BRACKET);
						State = 97;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_INTERPOLATION_START) | (1L << PLUS) | (1L << SUBSTRACT) | (1L << NON) | (1L << OPEN_BRACKET) | (1L << OPEN_SQUARE_BRACKET) | (1L << OPEN_CURLY_BRACKET) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << STRING))) != 0)) {
							{
							State = 96; argsList();
							}
						}

						State = 99; Match(CLOSE_BRACKET);
						}
						break;
					case 3:
						{
						_localctx = new IndexAccessExpContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 100;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 101; Match(OPEN_SQUARE_BRACKET);
						State = 102; expression(0);
						State = 103; Match(CLOSE_SQUARE_BRACKET);
						}
						break;
					}
					} 
				}
				State = 109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringInterpolationContext : ParserRuleContext {
		public ITerminalNode[] STRING_INTERPOLATION_START() { return GetTokens(ExpressionAntlrParser.STRING_INTERPOLATION_START); }
		public ITerminalNode STRING_INTERPOLATION_START(int i) {
			return GetToken(ExpressionAntlrParser.STRING_INTERPOLATION_START, i);
		}
		public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(ExpressionAntlrParser.ESCAPE_CHARACTER); }
		public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(ExpressionAntlrParser.ESCAPE_CHARACTER, i);
		}
		public ITerminalNode[] TEMPLATE() { return GetTokens(ExpressionAntlrParser.TEMPLATE); }
		public ITerminalNode TEMPLATE(int i) {
			return GetToken(ExpressionAntlrParser.TEMPLATE, i);
		}
		public TextContentContext[] textContent() {
			return GetRuleContexts<TextContentContext>();
		}
		public TextContentContext textContent(int i) {
			return GetRuleContext<TextContentContext>(i);
		}
		public StringInterpolationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringInterpolation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterStringInterpolation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitStringInterpolation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringInterpolation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringInterpolationContext stringInterpolation() {
		StringInterpolationContext _localctx = new StringInterpolationContext(Context, State);
		EnterRule(_localctx, 6, RULE_stringInterpolation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(STRING_INTERPOLATION_START);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEMPLATE) | (1L << ESCAPE_CHARACTER) | (1L << TEXT_CONTENT))) != 0)) {
				{
				State = 114;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ESCAPE_CHARACTER:
					{
					State = 111; Match(ESCAPE_CHARACTER);
					}
					break;
				case TEMPLATE:
					{
					State = 112; Match(TEMPLATE);
					}
					break;
				case TEXT_CONTENT:
					{
					State = 113; textContent();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119; Match(STRING_INTERPOLATION_START);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContentContext : ParserRuleContext {
		public ITerminalNode[] TEXT_CONTENT() { return GetTokens(ExpressionAntlrParser.TEXT_CONTENT); }
		public ITerminalNode TEXT_CONTENT(int i) {
			return GetToken(ExpressionAntlrParser.TEXT_CONTENT, i);
		}
		public TextContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterTextContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitTextContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContentContext textContent() {
		TextContentContext _localctx = new TextContentContext(Context, State);
		EnterRule(_localctx, 8, RULE_textContent);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 121; Match(TEXT_CONTENT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsListContext : ParserRuleContext {
		public LambdaContext[] lambda() {
			return GetRuleContexts<LambdaContext>();
		}
		public LambdaContext lambda(int i) {
			return GetRuleContext<LambdaContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ExpressionAntlrParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionAntlrParser.COMMA, i);
		}
		public ArgsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterArgsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitArgsList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsListContext argsList() {
		ArgsListContext _localctx = new ArgsListContext(Context, State);
		EnterRule(_localctx, 10, RULE_argsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 126; lambda();
				}
				break;
			case 2:
				{
				State = 127; expression(0);
				}
				break;
			}
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 130; Match(COMMA);
				State = 133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 131; lambda();
					}
					break;
				case 2:
					{
					State = 132; expression(0);
					}
					break;
				}
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
		public ITerminalNode ARROW() { return GetToken(ExpressionAntlrParser.ARROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(IDENTIFIER);
			State = 141; Match(ARROW);
			State = 142; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairListContext : ParserRuleContext {
		public KeyValuePairContext[] keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ExpressionAntlrParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionAntlrParser.COMMA, i);
		}
		public KeyValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePairList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterKeyValuePairList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitKeyValuePairList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairListContext keyValuePairList() {
		KeyValuePairListContext _localctx = new KeyValuePairListContext(Context, State);
		EnterRule(_localctx, 14, RULE_keyValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; keyValuePair();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 145; Match(COMMA);
				State = 146; keyValuePair();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ExpressionAntlrParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterKeyValuePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitKeyValuePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 16, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; key();
			State = 153; Match(COLON);
			State = 154; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
		public ITerminalNode STRING() { return GetToken(ExpressionAntlrParser.STRING, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 18, RULE_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 2: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '(', '\xA1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1E', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x41', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x44', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'M', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'R', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'Y', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'`', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x64', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', 'l', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', 'o', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', 'u', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'x', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x6', '\x6', '}', 
		'\n', '\x6', '\r', '\x6', '\xE', '\x6', '~', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x83', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x88', '\n', '\a', '\a', '\a', '\x8A', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x8D', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x96', '\n', '\t', '\f', '\t', '\xE', '\t', '\x99', '\v', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x2', '\x4', '\x4', '\x6', '\f', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\b', '\x3', '\x2', 
		'\x4', '\x6', '\x3', '\x2', '\b', '\n', '\x3', '\x2', '\x4', '\x5', '\x3', 
		'\x2', '\v', '\f', '\x3', '\x2', '\x10', '\x13', '\x4', '\x2', '\"', '\"', 
		'$', '$', '\x2', '\xB6', '\x2', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', 'X', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'p', '\x3', '\x2', '\x2', '\x2', '\n', '|', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x82', '\x3', '\x2', '\x2', '\x2', '\xE', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x92', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x14', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x17', '\x5', '\x4', '\x3', '\x2', '\x17', '\x18', '\a', 
		'\x2', '\x2', '\x3', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1A', '\b', '\x3', '\x1', '\x2', '\x1A', '\x1B', '\t', '\x2', '\x2', 
		'\x2', '\x1B', '\x1E', '\x5', '\x4', '\x3', '\xE', '\x1C', '\x1E', '\x5', 
		'\x6', '\x4', '\x2', '\x1D', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\f', '\r', '\x2', '\x2', ' ', '!', '\a', '\a', '\x2', 
		'\x2', '!', '\x41', '\x5', '\x4', '\x3', '\r', '\"', '#', '\f', '\f', 
		'\x2', '\x2', '#', '$', '\t', '\x3', '\x2', '\x2', '$', '\x41', '\x5', 
		'\x4', '\x3', '\r', '%', '&', '\f', '\v', '\x2', '\x2', '&', '\'', '\t', 
		'\x4', '\x2', '\x2', '\'', '\x41', '\x5', '\x4', '\x3', '\f', '(', ')', 
		'\f', '\n', '\x2', '\x2', ')', '*', '\t', '\x5', '\x2', '\x2', '*', '\x41', 
		'\x5', '\x4', '\x3', '\v', '+', ',', '\f', '\t', '\x2', '\x2', ',', '-', 
		'\a', '\r', '\x2', '\x2', '-', '\x41', '\x5', '\x4', '\x3', '\n', '.', 
		'/', '\f', '\b', '\x2', '\x2', '/', '\x30', '\t', '\x6', '\x2', '\x2', 
		'\x30', '\x41', '\x5', '\x4', '\x3', '\t', '\x31', '\x32', '\f', '\a', 
		'\x2', '\x2', '\x32', '\x33', '\a', '\xE', '\x2', '\x2', '\x33', '\x41', 
		'\x5', '\x4', '\x3', '\b', '\x34', '\x35', '\f', '\x6', '\x2', '\x2', 
		'\x35', '\x36', '\a', '\xF', '\x2', '\x2', '\x36', '\x41', '\x5', '\x4', 
		'\x3', '\a', '\x37', '\x38', '\f', '\x5', '\x2', '\x2', '\x38', '\x39', 
		'\a', '\x1E', '\x2', '\x2', '\x39', '\x41', '\x5', '\x4', '\x3', '\x6', 
		':', ';', '\f', '\x4', '\x2', '\x2', ';', '<', '\a', '\x1F', '\x2', '\x2', 
		'<', '=', '\x5', '\x4', '\x3', '\x2', '=', '>', '\a', '\x1C', '\x2', '\x2', 
		'>', '?', '\x5', '\x4', '\x3', '\x5', '?', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x1F', '\x3', '\x2', '\x2', '\x2', '@', '\"', '\x3', '\x2', 
		'\x2', '\x2', '@', '%', '\x3', '\x2', '\x2', '\x2', '@', '(', '\x3', '\x2', 
		'\x2', '\x2', '@', '+', '\x3', '\x2', '\x2', '\x2', '@', '.', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x31', '\x3', '\x2', '\x2', '\x2', '@', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x37', '\x3', '\x2', '\x2', '\x2', '@', ':', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x5', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\b', '\x4', '\x1', '\x2', 
		'\x46', 'G', '\a', '\x14', '\x2', '\x2', 'G', 'H', '\x5', '\x4', '\x3', 
		'\x2', 'H', 'I', '\a', '\x15', '\x2', '\x2', 'I', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'L', '\a', '\x17', '\x2', '\x2', 'K', 'M', '\x5', '\f', '\a', 
		'\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'Y', '\a', '\x18', '\x2', 
		'\x2', 'O', 'Q', '\a', '\x19', '\x2', '\x2', 'P', 'R', '\x5', '\x10', 
		'\t', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'Y', '\a', '\x1A', 
		'\x2', '\x2', 'T', 'Y', '\a', ' ', '\x2', '\x2', 'U', 'Y', '\a', '$', 
		'\x2', '\x2', 'V', 'Y', '\a', '\"', '\x2', '\x2', 'W', 'Y', '\x5', '\b', 
		'\x5', '\x2', 'X', '\x45', '\x3', '\x2', '\x2', '\x2', 'X', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'O', '\x3', '\x2', '\x2', '\x2', 'X', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\f', '\x5', '\x2', '\x2', '[', '\\', '\a', 
		'\x16', '\x2', '\x2', '\\', 'l', '\a', '\"', '\x2', '\x2', ']', '_', '\f', 
		'\x4', '\x2', '\x2', '^', '`', '\a', '\x6', '\x2', '\x2', '_', '^', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\a', '\x14', '\x2', '\x2', 
		'\x62', '\x64', '\x5', '\f', '\a', '\x2', '\x63', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x65', 'l', '\a', '\x15', '\x2', '\x2', '\x66', 
		'g', '\f', '\x3', '\x2', '\x2', 'g', 'h', '\a', '\x17', '\x2', '\x2', 
		'h', 'i', '\x5', '\x4', '\x3', '\x2', 'i', 'j', '\a', '\x18', '\x2', '\x2', 
		'j', 'l', '\x3', '\x2', '\x2', '\x2', 'k', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'k', ']', '\x3', '\x2', '\x2', '\x2', 'k', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'v', '\a', '\x3', 
		'\x2', '\x2', 'q', 'u', '\a', '\'', '\x2', '\x2', 'r', 'u', '\a', '&', 
		'\x2', '\x2', 's', 'u', '\x5', '\n', '\x6', '\x2', 't', 'q', '\x3', '\x2', 
		'\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 's', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '\x3', 
		'\x2', '\x2', 'z', '\t', '\x3', '\x2', '\x2', '\x2', '{', '}', '\a', '(', 
		'\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\v', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x83', '\x5', '\xE', '\b', '\x2', '\x81', '\x83', '\x5', '\x4', '\x3', 
		'\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x87', '\a', '\x1B', '\x2', '\x2', '\x85', '\x88', '\x5', '\xE', '\b', 
		'\x2', '\x86', '\x88', '\x5', '\x4', '\x3', '\x2', '\x87', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x89', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\a', '\"', '\x2', '\x2', '\x8F', '\x90', '\a', 
		'\x1D', '\x2', '\x2', '\x90', '\x91', '\x5', '\x4', '\x3', '\x2', '\x91', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x92', '\x97', '\x5', '\x12', '\n', 
		'\x2', '\x93', '\x94', '\a', '\x1B', '\x2', '\x2', '\x94', '\x96', '\x5', 
		'\x12', '\n', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9B', '\x5', '\x14', '\v', '\x2', '\x9B', '\x9C', '\a', '\x1C', '\x2', 
		'\x2', '\x9C', '\x9D', '\x5', '\x4', '\x3', '\x2', '\x9D', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\t', '\a', '\x2', '\x2', '\x9F', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x13', '\x1D', '@', '\x42', 'L', 
		'Q', 'X', '_', '\x63', 'k', 'm', 't', 'v', '~', '\x82', '\x87', '\x8B', 
		'\x97',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
