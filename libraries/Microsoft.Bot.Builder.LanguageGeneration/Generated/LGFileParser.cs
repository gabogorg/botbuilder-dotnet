//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LGFileParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LGFileParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, OPTION=2, COMMENT=3, IMPORT=4, TEMPLATE_NAME_LINE=5, INLINE_MULTILINE=6, 
		MULTILINE_PREFIX=7, TEMPLATE_BODY=8, INVALID_LINE=9, MULTILINE_SUFFIX=10, 
		ESCAPE_CHARACTER=11, MULTILINE_TEXT=12;
	public const int
		RULE_file = 0, RULE_paragraph = 1, RULE_commentDefinition = 2, RULE_importDefinition = 3, 
		RULE_optionDefinition = 4, RULE_errorDefinition = 5, RULE_templateDefinition = 6, 
		RULE_templateNameLine = 7, RULE_templateBody = 8, RULE_templateBodyLine = 9;
	public static readonly string[] ruleNames = {
		"file", "paragraph", "commentDefinition", "importDefinition", "optionDefinition", 
		"errorDefinition", "templateDefinition", "templateNameLine", "templateBody", 
		"templateBodyLine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'```'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "OPTION", "COMMENT", "IMPORT", "TEMPLATE_NAME_LINE", 
		"INLINE_MULTILINE", "MULTILINE_PREFIX", "TEMPLATE_BODY", "INVALID_LINE", 
		"MULTILINE_SUFFIX", "ESCAPE_CHARACTER", "MULTILINE_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LGFileParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LGFileParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LGFileParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LGFileParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LGFileParser.Eof, 0); }
		public ParagraphContext[] paragraph() {
			return GetRuleContexts<ParagraphContext>();
		}
		public ParagraphContext paragraph(int i) {
			return GetRuleContext<ParagraphContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 20; paragraph();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 23;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 25; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphContext : ParserRuleContext {
		public TemplateDefinitionContext templateDefinition() {
			return GetRuleContext<TemplateDefinitionContext>(0);
		}
		public ImportDefinitionContext importDefinition() {
			return GetRuleContext<ImportDefinitionContext>(0);
		}
		public OptionDefinitionContext optionDefinition() {
			return GetRuleContext<OptionDefinitionContext>(0);
		}
		public ErrorDefinitionContext errorDefinition() {
			return GetRuleContext<ErrorDefinitionContext>(0);
		}
		public CommentDefinitionContext commentDefinition() {
			return GetRuleContext<CommentDefinitionContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(LGFileParser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(LGFileParser.Eof, 0); }
		public ParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterParagraph(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitParagraph(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphContext paragraph() {
		ParagraphContext _localctx = new ParagraphContext(Context, State);
		EnterRule(_localctx, 2, RULE_paragraph);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEMPLATE_NAME_LINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; templateDefinition();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; importDefinition();
				}
				break;
			case OPTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 29; optionDefinition();
				}
				break;
			case INVALID_LINE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 30; errorDefinition();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 31; commentDefinition();
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 32; Match(NEWLINE);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 7);
				{
				State = 33; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentDefinitionContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(LGFileParser.COMMENT, 0); }
		public ITerminalNode NEWLINE() { return GetToken(LGFileParser.NEWLINE, 0); }
		public CommentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterCommentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitCommentDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentDefinitionContext commentDefinition() {
		CommentDefinitionContext _localctx = new CommentDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_commentDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(COMMENT);
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 37; Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefinitionContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(LGFileParser.IMPORT, 0); }
		public ITerminalNode NEWLINE() { return GetToken(LGFileParser.NEWLINE, 0); }
		public ImportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterImportDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitImportDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefinitionContext importDefinition() {
		ImportDefinitionContext _localctx = new ImportDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_importDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(IMPORT);
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 41; Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionDefinitionContext : ParserRuleContext {
		public ITerminalNode OPTION() { return GetToken(LGFileParser.OPTION, 0); }
		public ITerminalNode NEWLINE() { return GetToken(LGFileParser.NEWLINE, 0); }
		public OptionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterOptionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitOptionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionDefinitionContext optionDefinition() {
		OptionDefinitionContext _localctx = new OptionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_optionDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(OPTION);
			State = 46;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 45; Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorDefinitionContext : ParserRuleContext {
		public ITerminalNode INVALID_LINE() { return GetToken(LGFileParser.INVALID_LINE, 0); }
		public ITerminalNode NEWLINE() { return GetToken(LGFileParser.NEWLINE, 0); }
		public ErrorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterErrorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitErrorDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorDefinitionContext errorDefinition() {
		ErrorDefinitionContext _localctx = new ErrorDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_errorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(INVALID_LINE);
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 49; Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefinitionContext : ParserRuleContext {
		public TemplateNameLineContext templateNameLine() {
			return GetRuleContext<TemplateNameLineContext>(0);
		}
		public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public TemplateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterTemplateDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitTemplateDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefinitionContext templateDefinition() {
		TemplateDefinitionContext _localctx = new TemplateDefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_templateDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; templateNameLine();
			State = 53; templateBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateNameLineContext : ParserRuleContext {
		public ITerminalNode TEMPLATE_NAME_LINE() { return GetToken(LGFileParser.TEMPLATE_NAME_LINE, 0); }
		public ITerminalNode NEWLINE() { return GetToken(LGFileParser.NEWLINE, 0); }
		public TemplateNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateNameLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterTemplateNameLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitTemplateNameLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateNameLineContext templateNameLine() {
		TemplateNameLineContext _localctx = new TemplateNameLineContext(Context, State);
		EnterRule(_localctx, 14, RULE_templateNameLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(TEMPLATE_NAME_LINE);
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 56; Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBodyContext : ParserRuleContext {
		public TemplateBodyLineContext[] templateBodyLine() {
			return GetRuleContexts<TemplateBodyLineContext>();
		}
		public TemplateBodyLineContext templateBodyLine(int i) {
			return GetRuleContext<TemplateBodyLineContext>(i);
		}
		public TemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBodyContext templateBody() {
		TemplateBodyContext _localctx = new TemplateBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_templateBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 59; templateBodyLine();
					}
					} 
				}
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBodyLineContext : ParserRuleContext {
		public ITerminalNode TEMPLATE_BODY() { return GetToken(LGFileParser.TEMPLATE_BODY, 0); }
		public ITerminalNode INLINE_MULTILINE() { return GetToken(LGFileParser.INLINE_MULTILINE, 0); }
		public ITerminalNode NEWLINE() { return GetToken(LGFileParser.NEWLINE, 0); }
		public ITerminalNode MULTILINE_PREFIX() { return GetToken(LGFileParser.MULTILINE_PREFIX, 0); }
		public ITerminalNode MULTILINE_SUFFIX() { return GetToken(LGFileParser.MULTILINE_SUFFIX, 0); }
		public ITerminalNode[] MULTILINE_TEXT() { return GetTokens(LGFileParser.MULTILINE_TEXT); }
		public ITerminalNode MULTILINE_TEXT(int i) {
			return GetToken(LGFileParser.MULTILINE_TEXT, i);
		}
		public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LGFileParser.ESCAPE_CHARACTER); }
		public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LGFileParser.ESCAPE_CHARACTER, i);
		}
		public TemplateBodyLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBodyLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.EnterTemplateBodyLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGFileParserListener typedListener = listener as ILGFileParserListener;
			if (typedListener != null) typedListener.ExitTemplateBodyLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBodyLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBodyLineContext templateBodyLine() {
		TemplateBodyLineContext _localctx = new TemplateBodyLineContext(Context, State);
		EnterRule(_localctx, 18, RULE_templateBodyLine);
		int _la;
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INLINE_MULTILINE:
			case MULTILINE_PREFIX:
			case TEMPLATE_BODY:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 77;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPLATE_BODY:
					{
					State = 65; Match(TEMPLATE_BODY);
					}
					break;
				case INLINE_MULTILINE:
					{
					State = 66; Match(INLINE_MULTILINE);
					}
					break;
				case MULTILINE_PREFIX:
					{
					{
					State = 67; Match(MULTILINE_PREFIX);
					State = 71;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ESCAPE_CHARACTER || _la==MULTILINE_TEXT) {
						{
						{
						State = 68;
						_la = TokenStream.LA(1);
						if ( !(_la==ESCAPE_CHARACTER || _la==MULTILINE_TEXT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 73;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MULTILINE_SUFFIX) {
						{
						State = 74; Match(MULTILINE_SUFFIX);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 80;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 79; Match(NEWLINE);
					}
					break;
				}
				}
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', 'X', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x6', '\x2', '\x18', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x19', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '%', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', ')', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '-', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x31', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x35', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '<', '\n', '\t', 
		'\x3', '\n', '\a', '\n', '?', '\n', '\n', '\f', '\n', '\xE', '\n', '\x42', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', 'H', '\n', '\v', '\f', '\v', '\xE', '\v', 'K', '\v', '\v', '\x3', 
		'\v', '\x5', '\v', 'N', '\n', '\v', '\x5', '\v', 'P', '\n', '\v', '\x3', 
		'\v', '\x5', '\v', 'S', '\n', '\v', '\x3', '\v', '\x5', '\v', 'V', '\n', 
		'\v', '\x3', '\v', '\x3', '\x19', '\x2', '\f', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x3', '\x3', '\x2', 
		'\r', '\xE', '\x2', '`', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'$', '\x3', '\x2', '\x2', '\x2', '\x6', '&', '\x3', '\x2', '\x2', '\x2', 
		'\b', '*', '\x3', '\x2', '\x2', '\x2', '\n', '.', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x32', '\x3', '\x2', '\x2', '\x2', '\xE', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x39', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x14', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x18', '\x5', '\x4', '\x3', '\x2', '\x17', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x2', 
		'\x2', '\x3', '\x1C', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1D', '%', 
		'\x5', '\xE', '\b', '\x2', '\x1E', '%', '\x5', '\b', '\x5', '\x2', '\x1F', 
		'%', '\x5', '\n', '\x6', '\x2', ' ', '%', '\x5', '\f', '\a', '\x2', '!', 
		'%', '\x5', '\x6', '\x4', '\x2', '\"', '%', '\a', '\x3', '\x2', '\x2', 
		'#', '%', '\a', '\x2', '\x2', '\x3', '$', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x1E', '\x3', '\x2', '\x2', '\x2', '$', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '$', ' ', '\x3', '\x2', '\x2', '\x2', '$', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '#', '\x3', 
		'\x2', '\x2', '\x2', '%', '\x5', '\x3', '\x2', '\x2', '\x2', '&', '(', 
		'\a', '\x5', '\x2', '\x2', '\'', ')', '\a', '\x3', '\x2', '\x2', '(', 
		'\'', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', 
		')', '\a', '\x3', '\x2', '\x2', '\x2', '*', ',', '\a', '\x6', '\x2', '\x2', 
		'+', '-', '\a', '\x3', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\t', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x30', '\a', '\x4', '\x2', '\x2', '/', '\x31', '\a', '\x3', 
		'\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\a', '\v', '\x2', '\x2', '\x33', '\x35', '\a', '\x3', 
		'\x2', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x5', '\x10', '\t', '\x2', '\x37', '\x38', '\x5', '\x12', 
		'\n', '\x2', '\x38', '\xF', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\a', 
		'\a', '\x2', '\x2', ':', '<', '\a', '\x3', '\x2', '\x2', ';', ':', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '=', '?', '\x5', '\x14', '\v', '\x2', '>', 
		'=', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'@', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x13', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x43', 'P', '\a', '\n', '\x2', '\x2', '\x44', 'P', 
		'\a', '\b', '\x2', '\x2', '\x45', 'I', '\a', '\t', '\x2', '\x2', '\x46', 
		'H', '\t', '\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\a', '\f', '\x2', '\x2', 
		'M', 'L', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', '\x43', '\x3', '\x2', '\x2', 
		'\x2', 'O', '\x44', '\x3', '\x2', '\x2', '\x2', 'O', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\a', '\x3', 
		'\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\a', '\x3', 
		'\x2', '\x2', 'U', 'O', '\x3', '\x2', '\x2', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x15', '\x3', '\x2', '\x2', '\x2', '\xF', '\x19', 
		'$', '(', ',', '\x30', '\x34', ';', '@', 'I', 'M', 'O', 'R', 'U',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
