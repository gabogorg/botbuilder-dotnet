//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LGTemplateParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LGTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NEWLINE=2, COMMENTS=3, DASH=4, LEFT_SQUARE_BRACKET=5, INVALID_TOKEN=6, 
		WS_IN_BODY=7, MULTILINE_PREFIX=8, NEWLINE_IN_BODY=9, IF=10, ELSEIF=11, 
		ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, ESCAPE_CHARACTER=16, EXPRESSION=17, 
		TEXT=18, MULTILINE_SUFFIX=19, WS_IN_STRUCTURE_NAME=20, NEWLINE_IN_STRUCTURE_NAME=21, 
		STRUCTURE_NAME=22, TEXT_IN_STRUCTURE_NAME=23, STRUCTURED_COMMENTS=24, 
		WS_IN_STRUCTURE_BODY=25, STRUCTURED_NEWLINE=26, STRUCTURED_BODY_END=27, 
		STRUCTURE_IDENTIFIER=28, STRUCTURE_EQUALS=29, STRUCTURE_OR_MARK=30, ESCAPE_CHARACTER_IN_STRUCTURE_BODY=31, 
		EXPRESSION_IN_STRUCTURE_BODY=32, TEXT_IN_STRUCTURE_BODY=33;
	public const int
		RULE_context = 0, RULE_body = 1, RULE_structuredTemplateBody = 2, RULE_structuredBodyNameLine = 3, 
		RULE_errorStructuredName = 4, RULE_structuredBodyContentLine = 5, RULE_errorStructureLine = 6, 
		RULE_keyValueStructureLine = 7, RULE_keyValueStructureValue = 8, RULE_structuredBodyEndLine = 9, 
		RULE_normalTemplateBody = 10, RULE_templateString = 11, RULE_normalTemplateString = 12, 
		RULE_errorTemplateString = 13, RULE_ifElseTemplateBody = 14, RULE_ifConditionRule = 15, 
		RULE_ifCondition = 16, RULE_switchCaseTemplateBody = 17, RULE_switchCaseRule = 18, 
		RULE_switchCaseStat = 19, RULE_expression = 20, RULE_expressionInStructure = 21;
	public static readonly string[] ruleNames = {
		"context", "body", "structuredTemplateBody", "structuredBodyNameLine", 
		"errorStructuredName", "structuredBodyContentLine", "errorStructureLine", 
		"keyValueStructureLine", "keyValueStructureValue", "structuredBodyEndLine", 
		"normalTemplateBody", "templateString", "normalTemplateString", "errorTemplateString", 
		"ifElseTemplateBody", "ifConditionRule", "ifCondition", "switchCaseTemplateBody", 
		"switchCaseRule", "switchCaseStat", "expression", "expressionInStructure"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "COMMENTS", "DASH", "LEFT_SQUARE_BRACKET", "INVALID_TOKEN", 
		"WS_IN_BODY", "MULTILINE_PREFIX", "NEWLINE_IN_BODY", "IF", "ELSEIF", "ELSE", 
		"SWITCH", "CASE", "DEFAULT", "ESCAPE_CHARACTER", "EXPRESSION", "TEXT", 
		"MULTILINE_SUFFIX", "WS_IN_STRUCTURE_NAME", "NEWLINE_IN_STRUCTURE_NAME", 
		"STRUCTURE_NAME", "TEXT_IN_STRUCTURE_NAME", "STRUCTURED_COMMENTS", "WS_IN_STRUCTURE_BODY", 
		"STRUCTURED_NEWLINE", "STRUCTURED_BODY_END", "STRUCTURE_IDENTIFIER", "STRUCTURE_EQUALS", 
		"STRUCTURE_OR_MARK", "ESCAPE_CHARACTER_IN_STRUCTURE_BODY", "EXPRESSION_IN_STRUCTURE_BODY", 
		"TEXT_IN_STRUCTURE_BODY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LGTemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LGTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LGTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LGTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ContextContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LGTemplateParser.Eof, 0); }
		public ContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterContext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitContext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextContext context() {
		ContextContext _localctx = new ContextContext(Context, State);
		EnterRule(_localctx, 0, RULE_context);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; body();
			State = 45; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
	 
		public BodyContext() { }
		public virtual void CopyFrom(BodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchCaseBodyContext : BodyContext {
		public SwitchCaseTemplateBodyContext switchCaseTemplateBody() {
			return GetRuleContext<SwitchCaseTemplateBodyContext>(0);
		}
		public SwitchCaseBodyContext(BodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NormalBodyContext : BodyContext {
		public NormalTemplateBodyContext normalTemplateBody() {
			return GetRuleContext<NormalTemplateBodyContext>(0);
		}
		public NormalBodyContext(BodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterNormalBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitNormalBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructuredBodyContext : BodyContext {
		public StructuredTemplateBodyContext structuredTemplateBody() {
			return GetRuleContext<StructuredTemplateBodyContext>(0);
		}
		public StructuredBodyContext(BodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseBodyContext : BodyContext {
		public IfElseTemplateBodyContext ifElseTemplateBody() {
			return GetRuleContext<IfElseTemplateBodyContext>(0);
		}
		public IfElseBodyContext(BodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterIfElseBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitIfElseBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_body);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new NormalBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; normalTemplateBody();
				}
				break;
			case 2:
				_localctx = new IfElseBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; ifElseTemplateBody();
				}
				break;
			case 3:
				_localctx = new SwitchCaseBodyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; switchCaseTemplateBody();
				}
				break;
			case 4:
				_localctx = new StructuredBodyContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 50; structuredTemplateBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredTemplateBodyContext : ParserRuleContext {
		public StructuredBodyNameLineContext structuredBodyNameLine() {
			return GetRuleContext<StructuredBodyNameLineContext>(0);
		}
		public StructuredBodyEndLineContext structuredBodyEndLine() {
			return GetRuleContext<StructuredBodyEndLineContext>(0);
		}
		public ErrorStructureLineContext[] errorStructureLine() {
			return GetRuleContexts<ErrorStructureLineContext>();
		}
		public ErrorStructureLineContext errorStructureLine(int i) {
			return GetRuleContext<ErrorStructureLineContext>(i);
		}
		public ITerminalNode[] STRUCTURED_NEWLINE() { return GetTokens(LGTemplateParser.STRUCTURED_NEWLINE); }
		public ITerminalNode STRUCTURED_NEWLINE(int i) {
			return GetToken(LGTemplateParser.STRUCTURED_NEWLINE, i);
		}
		public StructuredBodyContentLineContext[] structuredBodyContentLine() {
			return GetRuleContexts<StructuredBodyContentLineContext>();
		}
		public StructuredBodyContentLineContext structuredBodyContentLine(int i) {
			return GetRuleContext<StructuredBodyContentLineContext>(i);
		}
		public StructuredTemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredTemplateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredTemplateBodyContext structuredTemplateBody() {
		StructuredTemplateBodyContext _localctx = new StructuredTemplateBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_structuredTemplateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; structuredBodyNameLine();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRUCTURED_NEWLINE) | (1L << STRUCTURE_IDENTIFIER) | (1L << STRUCTURE_EQUALS) | (1L << STRUCTURE_OR_MARK) | (1L << ESCAPE_CHARACTER_IN_STRUCTURE_BODY) | (1L << EXPRESSION_IN_STRUCTURE_BODY) | (1L << TEXT_IN_STRUCTURE_BODY))) != 0)) {
				{
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 59;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						{
						State = 55;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==STRUCTURE_IDENTIFIER || _la==EXPRESSION_IN_STRUCTURE_BODY) {
							{
							State = 54; structuredBodyContentLine();
							}
						}

						State = 57; Match(STRUCTURED_NEWLINE);
						}
						}
						break;
					case 2:
						{
						State = 58; errorStructureLine();
						}
						break;
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRUCTURED_NEWLINE) | (1L << STRUCTURE_IDENTIFIER) | (1L << STRUCTURE_EQUALS) | (1L << STRUCTURE_OR_MARK) | (1L << ESCAPE_CHARACTER_IN_STRUCTURE_BODY) | (1L << EXPRESSION_IN_STRUCTURE_BODY) | (1L << TEXT_IN_STRUCTURE_BODY))) != 0) );
				}
			}

			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRUCTURED_BODY_END) {
				{
				State = 65; structuredBodyEndLine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredBodyNameLineContext : ParserRuleContext {
		public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(LGTemplateParser.LEFT_SQUARE_BRACKET, 0); }
		public ITerminalNode STRUCTURE_NAME() { return GetToken(LGTemplateParser.STRUCTURE_NAME, 0); }
		public ErrorStructuredNameContext errorStructuredName() {
			return GetRuleContext<ErrorStructuredNameContext>(0);
		}
		public StructuredBodyNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredBodyNameLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredBodyNameLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredBodyNameLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredBodyNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredBodyNameLineContext structuredBodyNameLine() {
		StructuredBodyNameLineContext _localctx = new StructuredBodyNameLineContext(Context, State);
		EnterRule(_localctx, 6, RULE_structuredBodyNameLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(LEFT_SQUARE_BRACKET);
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 69; Match(STRUCTURE_NAME);
				}
				break;
			case 2:
				{
				State = 70; errorStructuredName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStructuredNameContext : ParserRuleContext {
		public ITerminalNode[] STRUCTURE_NAME() { return GetTokens(LGTemplateParser.STRUCTURE_NAME); }
		public ITerminalNode STRUCTURE_NAME(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_NAME, i);
		}
		public ITerminalNode[] TEXT_IN_STRUCTURE_NAME() { return GetTokens(LGTemplateParser.TEXT_IN_STRUCTURE_NAME); }
		public ITerminalNode TEXT_IN_STRUCTURE_NAME(int i) {
			return GetToken(LGTemplateParser.TEXT_IN_STRUCTURE_NAME, i);
		}
		public ErrorStructuredNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStructuredName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterErrorStructuredName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitErrorStructuredName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStructuredName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStructuredNameContext errorStructuredName() {
		ErrorStructuredNameContext _localctx = new ErrorStructuredNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_errorStructuredName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRUCTURE_NAME || _la==TEXT_IN_STRUCTURE_NAME) {
				{
				{
				State = 73;
				_la = TokenStream.LA(1);
				if ( !(_la==STRUCTURE_NAME || _la==TEXT_IN_STRUCTURE_NAME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredBodyContentLineContext : ParserRuleContext {
		public KeyValueStructureLineContext keyValueStructureLine() {
			return GetRuleContext<KeyValueStructureLineContext>(0);
		}
		public ExpressionInStructureContext expressionInStructure() {
			return GetRuleContext<ExpressionInStructureContext>(0);
		}
		public StructuredBodyContentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredBodyContentLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredBodyContentLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredBodyContentLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredBodyContentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredBodyContentLineContext structuredBodyContentLine() {
		StructuredBodyContentLineContext _localctx = new StructuredBodyContentLineContext(Context, State);
		EnterRule(_localctx, 10, RULE_structuredBodyContentLine);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCTURE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; keyValueStructureLine();
				}
				break;
			case EXPRESSION_IN_STRUCTURE_BODY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; expressionInStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStructureLineContext : ParserRuleContext {
		public ITerminalNode[] STRUCTURE_IDENTIFIER() { return GetTokens(LGTemplateParser.STRUCTURE_IDENTIFIER); }
		public ITerminalNode STRUCTURE_IDENTIFIER(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_IDENTIFIER, i);
		}
		public ITerminalNode[] STRUCTURE_EQUALS() { return GetTokens(LGTemplateParser.STRUCTURE_EQUALS); }
		public ITerminalNode STRUCTURE_EQUALS(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_EQUALS, i);
		}
		public ITerminalNode[] STRUCTURE_OR_MARK() { return GetTokens(LGTemplateParser.STRUCTURE_OR_MARK); }
		public ITerminalNode STRUCTURE_OR_MARK(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_OR_MARK, i);
		}
		public ITerminalNode[] TEXT_IN_STRUCTURE_BODY() { return GetTokens(LGTemplateParser.TEXT_IN_STRUCTURE_BODY); }
		public ITerminalNode TEXT_IN_STRUCTURE_BODY(int i) {
			return GetToken(LGTemplateParser.TEXT_IN_STRUCTURE_BODY, i);
		}
		public ExpressionInStructureContext[] expressionInStructure() {
			return GetRuleContexts<ExpressionInStructureContext>();
		}
		public ExpressionInStructureContext expressionInStructure(int i) {
			return GetRuleContext<ExpressionInStructureContext>(i);
		}
		public ITerminalNode[] ESCAPE_CHARACTER_IN_STRUCTURE_BODY() { return GetTokens(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY); }
		public ITerminalNode ESCAPE_CHARACTER_IN_STRUCTURE_BODY(int i) {
			return GetToken(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY, i);
		}
		public ErrorStructureLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStructureLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterErrorStructureLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitErrorStructureLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStructureLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStructureLineContext errorStructureLine() {
		ErrorStructureLineContext _localctx = new ErrorStructureLineContext(Context, State);
		EnterRule(_localctx, 12, RULE_errorStructureLine);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 89;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRUCTURE_IDENTIFIER:
						{
						State = 83; Match(STRUCTURE_IDENTIFIER);
						}
						break;
					case STRUCTURE_EQUALS:
						{
						State = 84; Match(STRUCTURE_EQUALS);
						}
						break;
					case STRUCTURE_OR_MARK:
						{
						State = 85; Match(STRUCTURE_OR_MARK);
						}
						break;
					case TEXT_IN_STRUCTURE_BODY:
						{
						State = 86; Match(TEXT_IN_STRUCTURE_BODY);
						}
						break;
					case EXPRESSION_IN_STRUCTURE_BODY:
						{
						State = 87; expressionInStructure();
						}
						break;
					case ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
						{
						State = 88; Match(ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 91;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueStructureLineContext : ParserRuleContext {
		public ITerminalNode STRUCTURE_IDENTIFIER() { return GetToken(LGTemplateParser.STRUCTURE_IDENTIFIER, 0); }
		public ITerminalNode STRUCTURE_EQUALS() { return GetToken(LGTemplateParser.STRUCTURE_EQUALS, 0); }
		public KeyValueStructureValueContext[] keyValueStructureValue() {
			return GetRuleContexts<KeyValueStructureValueContext>();
		}
		public KeyValueStructureValueContext keyValueStructureValue(int i) {
			return GetRuleContext<KeyValueStructureValueContext>(i);
		}
		public ITerminalNode[] STRUCTURE_OR_MARK() { return GetTokens(LGTemplateParser.STRUCTURE_OR_MARK); }
		public ITerminalNode STRUCTURE_OR_MARK(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_OR_MARK, i);
		}
		public KeyValueStructureLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueStructureLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterKeyValueStructureLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitKeyValueStructureLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueStructureLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueStructureLineContext keyValueStructureLine() {
		KeyValueStructureLineContext _localctx = new KeyValueStructureLineContext(Context, State);
		EnterRule(_localctx, 14, RULE_keyValueStructureLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(STRUCTURE_IDENTIFIER);
			State = 94; Match(STRUCTURE_EQUALS);
			State = 95; keyValueStructureValue();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRUCTURE_OR_MARK) {
				{
				{
				State = 96; Match(STRUCTURE_OR_MARK);
				State = 97; keyValueStructureValue();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueStructureValueContext : ParserRuleContext {
		public ITerminalNode[] TEXT_IN_STRUCTURE_BODY() { return GetTokens(LGTemplateParser.TEXT_IN_STRUCTURE_BODY); }
		public ITerminalNode TEXT_IN_STRUCTURE_BODY(int i) {
			return GetToken(LGTemplateParser.TEXT_IN_STRUCTURE_BODY, i);
		}
		public ExpressionInStructureContext[] expressionInStructure() {
			return GetRuleContexts<ExpressionInStructureContext>();
		}
		public ExpressionInStructureContext expressionInStructure(int i) {
			return GetRuleContext<ExpressionInStructureContext>(i);
		}
		public ITerminalNode[] ESCAPE_CHARACTER_IN_STRUCTURE_BODY() { return GetTokens(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY); }
		public ITerminalNode ESCAPE_CHARACTER_IN_STRUCTURE_BODY(int i) {
			return GetToken(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY, i);
		}
		public KeyValueStructureValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueStructureValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterKeyValueStructureValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitKeyValueStructureValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueStructureValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueStructureValueContext keyValueStructureValue() {
		KeyValueStructureValueContext _localctx = new KeyValueStructureValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_keyValueStructureValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 106;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT_IN_STRUCTURE_BODY:
					{
					State = 103; Match(TEXT_IN_STRUCTURE_BODY);
					}
					break;
				case EXPRESSION_IN_STRUCTURE_BODY:
					{
					State = 104; expressionInStructure();
					}
					break;
				case ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
					{
					State = 105; Match(ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPE_CHARACTER_IN_STRUCTURE_BODY) | (1L << EXPRESSION_IN_STRUCTURE_BODY) | (1L << TEXT_IN_STRUCTURE_BODY))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredBodyEndLineContext : ParserRuleContext {
		public ITerminalNode STRUCTURED_BODY_END() { return GetToken(LGTemplateParser.STRUCTURED_BODY_END, 0); }
		public StructuredBodyEndLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredBodyEndLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredBodyEndLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredBodyEndLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredBodyEndLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredBodyEndLineContext structuredBodyEndLine() {
		StructuredBodyEndLineContext _localctx = new StructuredBodyEndLineContext(Context, State);
		EnterRule(_localctx, 18, RULE_structuredBodyEndLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(STRUCTURED_BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalTemplateBodyContext : ParserRuleContext {
		public TemplateStringContext[] templateString() {
			return GetRuleContexts<TemplateStringContext>();
		}
		public TemplateStringContext templateString(int i) {
			return GetRuleContext<TemplateStringContext>(i);
		}
		public NormalTemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalTemplateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterNormalTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitNormalTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalTemplateBodyContext normalTemplateBody() {
		NormalTemplateBodyContext _localctx = new NormalTemplateBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_normalTemplateBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 112; templateString();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringContext : ParserRuleContext {
		public NormalTemplateStringContext normalTemplateString() {
			return GetRuleContext<NormalTemplateStringContext>(0);
		}
		public ErrorTemplateStringContext errorTemplateString() {
			return GetRuleContext<ErrorTemplateStringContext>(0);
		}
		public TemplateStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateString; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterTemplateString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitTemplateString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringContext templateString() {
		TemplateStringContext _localctx = new TemplateStringContext(Context, State);
		EnterRule(_localctx, 22, RULE_templateString);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; normalTemplateString();
				}
				break;
			case INVALID_TOKEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; errorTemplateString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalTemplateStringContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(LGTemplateParser.DASH, 0); }
		public ITerminalNode MULTILINE_PREFIX() { return GetToken(LGTemplateParser.MULTILINE_PREFIX, 0); }
		public ITerminalNode[] TEXT() { return GetTokens(LGTemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(LGTemplateParser.TEXT, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LGTemplateParser.ESCAPE_CHARACTER); }
		public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LGTemplateParser.ESCAPE_CHARACTER, i);
		}
		public ITerminalNode MULTILINE_SUFFIX() { return GetToken(LGTemplateParser.MULTILINE_SUFFIX, 0); }
		public NormalTemplateStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalTemplateString; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterNormalTemplateString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitNormalTemplateString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalTemplateString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalTemplateStringContext normalTemplateString() {
		NormalTemplateStringContext _localctx = new NormalTemplateStringContext(Context, State);
		EnterRule(_localctx, 24, RULE_normalTemplateString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(DASH);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MULTILINE_PREFIX) {
				{
				State = 122; Match(MULTILINE_PREFIX);
				}
			}

			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPE_CHARACTER) | (1L << EXPRESSION) | (1L << TEXT))) != 0)) {
				{
				State = 128;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 125; Match(TEXT);
					}
					break;
				case EXPRESSION:
					{
					State = 126; expression();
					}
					break;
				case ESCAPE_CHARACTER:
					{
					State = 127; Match(ESCAPE_CHARACTER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MULTILINE_SUFFIX) {
				{
				State = 133; Match(MULTILINE_SUFFIX);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorTemplateStringContext : ParserRuleContext {
		public ITerminalNode[] INVALID_TOKEN() { return GetTokens(LGTemplateParser.INVALID_TOKEN); }
		public ITerminalNode INVALID_TOKEN(int i) {
			return GetToken(LGTemplateParser.INVALID_TOKEN, i);
		}
		public ErrorTemplateStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorTemplateString; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterErrorTemplateString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitErrorTemplateString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorTemplateString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorTemplateStringContext errorTemplateString() {
		ErrorTemplateStringContext _localctx = new ErrorTemplateStringContext(Context, State);
		EnterRule(_localctx, 26, RULE_errorTemplateString);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 136; Match(INVALID_TOKEN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseTemplateBodyContext : ParserRuleContext {
		public IfConditionRuleContext[] ifConditionRule() {
			return GetRuleContexts<IfConditionRuleContext>();
		}
		public IfConditionRuleContext ifConditionRule(int i) {
			return GetRuleContext<IfConditionRuleContext>(i);
		}
		public IfElseTemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseTemplateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterIfElseTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitIfElseTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseTemplateBodyContext ifElseTemplateBody() {
		IfElseTemplateBodyContext _localctx = new IfElseTemplateBodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifElseTemplateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 141; ifConditionRule();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DASH );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionRuleContext : ParserRuleContext {
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public NormalTemplateBodyContext normalTemplateBody() {
			return GetRuleContext<NormalTemplateBodyContext>(0);
		}
		public IfConditionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterIfConditionRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitIfConditionRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionRuleContext ifConditionRule() {
		IfConditionRuleContext _localctx = new IfConditionRuleContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifConditionRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; ifCondition();
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 147; normalTemplateBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(LGTemplateParser.DASH, 0); }
		public ITerminalNode IF() { return GetToken(LGTemplateParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(LGTemplateParser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(LGTemplateParser.ELSEIF, 0); }
		public ITerminalNode[] WS() { return GetTokens(LGTemplateParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LGTemplateParser.WS, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(LGTemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(LGTemplateParser.TEXT, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterIfCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitIfCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(DASH);
			State = 151;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ELSEIF) | (1L << ELSE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << EXPRESSION) | (1L << TEXT))) != 0)) {
				{
				State = 155;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WS:
					{
					State = 152; Match(WS);
					}
					break;
				case TEXT:
					{
					State = 153; Match(TEXT);
					}
					break;
				case EXPRESSION:
					{
					State = 154; expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseTemplateBodyContext : ParserRuleContext {
		public SwitchCaseRuleContext[] switchCaseRule() {
			return GetRuleContexts<SwitchCaseRuleContext>();
		}
		public SwitchCaseRuleContext switchCaseRule(int i) {
			return GetRuleContext<SwitchCaseRuleContext>(i);
		}
		public SwitchCaseTemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseTemplateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseTemplateBodyContext switchCaseTemplateBody() {
		SwitchCaseTemplateBodyContext _localctx = new SwitchCaseTemplateBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_switchCaseTemplateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 160; switchCaseRule();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DASH );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseRuleContext : ParserRuleContext {
		public SwitchCaseStatContext switchCaseStat() {
			return GetRuleContext<SwitchCaseStatContext>(0);
		}
		public NormalTemplateBodyContext normalTemplateBody() {
			return GetRuleContext<NormalTemplateBodyContext>(0);
		}
		public SwitchCaseRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseRuleContext switchCaseRule() {
		SwitchCaseRuleContext _localctx = new SwitchCaseRuleContext(Context, State);
		EnterRule(_localctx, 36, RULE_switchCaseRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; switchCaseStat();
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 166; normalTemplateBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseStatContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(LGTemplateParser.DASH, 0); }
		public ITerminalNode SWITCH() { return GetToken(LGTemplateParser.SWITCH, 0); }
		public ITerminalNode CASE() { return GetToken(LGTemplateParser.CASE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(LGTemplateParser.DEFAULT, 0); }
		public ITerminalNode[] WS() { return GetTokens(LGTemplateParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LGTemplateParser.WS, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(LGTemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(LGTemplateParser.TEXT, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SwitchCaseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseStatContext switchCaseStat() {
		SwitchCaseStatContext _localctx = new SwitchCaseStatContext(Context, State);
		EnterRule(_localctx, 38, RULE_switchCaseStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(DASH);
			State = 170;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CASE) | (1L << DEFAULT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << EXPRESSION) | (1L << TEXT))) != 0)) {
				{
				State = 174;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WS:
					{
					State = 171; Match(WS);
					}
					break;
				case TEXT:
					{
					State = 172; Match(TEXT);
					}
					break;
				case EXPRESSION:
					{
					State = 173; expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode EXPRESSION() { return GetToken(LGTemplateParser.EXPRESSION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(EXPRESSION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionInStructureContext : ParserRuleContext {
		public ITerminalNode EXPRESSION_IN_STRUCTURE_BODY() { return GetToken(LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY, 0); }
		public ExpressionInStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionInStructure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterExpressionInStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitExpressionInStructure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionInStructureContext expressionInStructure() {
		ExpressionInStructureContext _localctx = new ExpressionInStructureContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionInStructure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(EXPRESSION_IN_STRUCTURE_BODY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\xBA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x36', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', ':', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', 
		'>', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '?', '\x5', '\x4', '\x42', 
		'\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\x45', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'J', '\n', '\x5', '\x3', '\x6', 
		'\a', '\x6', 'M', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'P', '\v', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'T', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x6', '\b', 
		'\\', '\n', '\b', '\r', '\b', '\xE', '\b', ']', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x65', '\n', '\t', 
		'\f', '\t', '\xE', '\t', 'h', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x6', '\n', 'm', '\n', '\n', '\r', '\n', '\xE', '\n', 'n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x6', '\f', 't', '\n', '\f', '\r', '\f', 
		'\xE', '\f', 'u', '\x3', '\r', '\x3', '\r', '\x5', '\r', 'z', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '~', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x83', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x86', '\v', '\xE', '\x3', '\xE', '\x5', '\xE', '\x89', 
		'\n', '\xE', '\x3', '\xF', '\x6', '\xF', '\x8C', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', '\x8D', '\x3', '\x10', '\x6', '\x10', '\x91', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '\x92', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x97', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x9E', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\xA1', '\v', '\x12', '\x3', '\x13', '\x6', '\x13', 
		'\xA4', '\n', '\x13', '\r', '\x13', '\xE', '\x13', '\xA5', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xAA', '\n', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xB1', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xB4', '\v', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x2', 
		'\x2', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '\x2', '\x5', '\x3', '\x2', '\x18', '\x19', '\x3', '\x2', '\f', 
		'\xE', '\x3', '\x2', '\xF', '\x11', '\x2', '\xCA', '\x2', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x35', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\b', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'N', '\x3', '\x2', '\x2', '\x2', '\f', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '[', '\x3', '\x2', '\x2', '\x2', '\x10', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'l', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'p', '\x3', '\x2', '\x2', '\x2', '\x16', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 'y', '\x3', '\x2', '\x2', '\x2', '\x1A', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x90', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x94', '\x3', '\x2', '\x2', '\x2', '\"', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xA3', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '(', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xB5', '\x3', '\x2', '\x2', '\x2', ',', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\x5', '\x4', '\x3', '\x2', '/', '\x30', '\a', 
		'\x2', '\x2', '\x3', '\x30', '\x3', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x36', '\x5', '\x16', '\f', '\x2', '\x32', '\x36', '\x5', '\x1E', '\x10', 
		'\x2', '\x33', '\x36', '\x5', '$', '\x13', '\x2', '\x34', '\x36', '\x5', 
		'\x6', '\x4', '\x2', '\x35', '\x31', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x41', '\x5', '\b', '\x5', '\x2', '\x38', 
		':', '\x5', '\f', '\a', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', 
		'\x2', ';', '>', '\a', '\x1C', '\x2', '\x2', '<', '>', '\x5', '\xE', '\b', 
		'\x2', '=', '\x39', '\x3', '\x2', '\x2', '\x2', '=', '<', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '=', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x45', '\x5', '\x14', '\v', '\x2', '\x44', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x46', 'I', '\a', '\a', '\x2', '\x2', 
		'G', 'J', '\a', '\x18', '\x2', '\x2', 'H', 'J', '\x5', '\n', '\x6', '\x2', 
		'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', '\t', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\t', '\x2', '\x2', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', '\v', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'T', '\x5', '\x10', '\t', '\x2', 'R', 'T', '\x5', ',', '\x17', 
		'\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'T', '\r', '\x3', '\x2', '\x2', '\x2', 'U', '\\', '\a', '\x1E', 
		'\x2', '\x2', 'V', '\\', '\a', '\x1F', '\x2', '\x2', 'W', '\\', '\a', 
		' ', '\x2', '\x2', 'X', '\\', '\a', '#', '\x2', '\x2', 'Y', '\\', '\x5', 
		',', '\x17', '\x2', 'Z', '\\', '\a', '!', '\x2', '\x2', '[', 'U', '\x3', 
		'\x2', '\x2', '\x2', '[', 'V', '\x3', '\x2', '\x2', '\x2', '[', 'W', '\x3', 
		'\x2', '\x2', '\x2', '[', 'X', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', 
		'^', '\x3', '\x2', '\x2', '\x2', '^', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\a', '\x1E', '\x2', '\x2', '`', '\x61', '\a', '\x1F', '\x2', 
		'\x2', '\x61', '\x66', '\x5', '\x12', '\n', '\x2', '\x62', '\x63', '\a', 
		' ', '\x2', '\x2', '\x63', '\x65', '\x5', '\x12', '\n', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x11', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'm', '\a', '#', '\x2', '\x2', 'j', 'm', 
		'\x5', ',', '\x17', '\x2', 'k', 'm', '\a', '!', '\x2', '\x2', 'l', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 
		'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 
		'n', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', '\x13', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x1D', '\x2', 
		'\x2', 'q', '\x15', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x5', '\x18', 
		'\r', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x17', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x5', 
		'\x1A', '\xE', '\x2', 'x', 'z', '\x5', '\x1C', '\xF', '\x2', 'y', 'w', 
		'\x3', '\x2', '\x2', '\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '{', '}', '\a', '\x6', '\x2', '\x2', 
		'|', '~', '\a', '\n', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', 
		'}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x83', '\a', '\x14', '\x2', '\x2', '\x80', '\x83', '\x5', 
		'*', '\x16', '\x2', '\x81', '\x83', '\a', '\x12', '\x2', '\x2', '\x82', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\a', 
		'\x15', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8C', '\a', '\b', '\x2', '\x2', '\x8B', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', '\x5', 
		' ', '\x11', '\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x96', '\x5', '\"', '\x12', '\x2', '\x95', 
		'\x97', '\x5', '\x16', '\f', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\x6', '\x2', '\x2', '\x99', 
		'\x9F', '\t', '\x3', '\x2', '\x2', '\x9A', '\x9E', '\a', '\x3', '\x2', 
		'\x2', '\x9B', '\x9E', '\a', '\x14', '\x2', '\x2', '\x9C', '\x9E', '\x5', 
		'*', '\x16', '\x2', '\x9D', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA4', '\x5', '&', '\x14', '\x2', '\xA3', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '%', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\x5', 
		'(', '\x15', '\x2', '\xA8', '\xAA', '\x5', '\x16', '\f', '\x2', '\xA9', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\'', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', 
		'\x6', '\x2', '\x2', '\xAC', '\xB2', '\t', '\x4', '\x2', '\x2', '\xAD', 
		'\xB1', '\a', '\x3', '\x2', '\x2', '\xAE', '\xB1', '\a', '\x14', '\x2', 
		'\x2', '\xAF', '\xB1', '\x5', '*', '\x16', '\x2', '\xB0', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', ')', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x13', '\x2', 
		'\x2', '\xB6', '+', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'\"', '\x2', '\x2', '\xB8', '-', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x35', 
		'\x39', '=', '?', '\x41', '\x44', 'I', 'N', 'S', '[', ']', '\x66', 'l', 
		'n', 'u', 'y', '}', '\x82', '\x84', '\x88', '\x8D', '\x92', '\x96', '\x9D', 
		'\x9F', '\xA5', '\xA9', '\xB0', '\xB2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
